{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang16\b\f0\fs22 com_helloworld_01\b0\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Ci concentriamo dapprima sulla parte backend del componente, quindi oltre al manifest file che dovr\'e0 essere posizionato nella root di installazione del sito, in questo caso in com_helloworld_01/\b helloworld.xml\b0 , andremo a lavorare prevalentemente sulla cartella com_helloworld/admin/\b\par
\b0{\pntext\f1\'B7\tab}Nel manifest la presenza del tag <version> permette di gestire le versioni incrementali di aggiornamento. Se viene utilizzato l'attributo method="upgrade" nel tag <extension> le installazioni successive del componente consentiranno di aggiornare il componente senza doverlo necessariamente disintallare. \par
{\pntext\f1\'B7\tab}Il file com_helloworld_01/admin/helloworld.php, detto "entry point" \'e8 mandatory in quando rappresenta il punto di ingresso del componente stesso. La semplicit\'e0 dell'esempio fa intuire che, a prescindere sull'uso o meno del framework di Joomla, questo file pu\'f2 contenere qualsiasi cosa. Si delega quindi la responsabilit\'e0 della scrittura corretta del codice al programmatore.\par
\pard\sa200\sl276\slmult1\b com_helloworld_02\b0\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Modificato il file com_helloworld_02/helloworld.xml cambiando la versione del componente da 0.0.1 a 0.0.2. Questo tipo di modifica viene data per scontata da qui in avanti.\par
{\pntext\f1\'B7\tab}Si intravede un primo accenno all'implementazione del paradigma MVC, attraverso l'introduzione del file  com_helloworld_02/admin/controller.php e della cartella  com_helloworld_02/views.\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 com_helloworld_02/admin/helloworld.php contiene infatti la chiamata dell'istanza del controller \b helloworldController \b0 contenuto nel file controller.php. la classe helloworldController deve istanziare semplicemente \b JControllerLegacy \b0 supeclasse che utilizza la vecchia versione del Joomla Framework, quella ancora retrocompatibile con la versione 2.5.5 di Joomla. La nuova versione del framework non viene ancora utilizzata a livello di CMS. E' da notare che in questo caso, essendo presente un solo controller, \'e8 possibile ovviare alla creazione di una cartella "controllers" dedicata che verr\'e0 invece introdotta successivamente.\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 la cartella \b views\b0  contiene una sottocartella battezzata con il nome del controller di riferimento . In questo caso il controller si chiama helloworld e quindi anche la cartella della vista relativa si chiamer\'e0 \b helloworld\b0 . All'interno di ciascuna cartella dedicata alla vista sono presenti un file com_helloworld_02/admin/views/helloworld/\b view.html.php \b0 ed una cartella com_helloworld_02/admin/views/helloworld/\b tmpl\b0 . Il primo viene chiamata pre-vista ed \'e8 un file che recupera le informazioni messe a disposizione dal modello (se presente), le impacchetta in qualche modo e le fornisce alla vista vera e propria, ovverosia l'html misto al php che formatta la pagina vera e proprioa destinata all''output. All'interno della cartella tmpl quindi, come minimo deve esistere il file com_helloworld_02/admin/views/helloworld/tmpl/\b default.php \b0 ovverosia il file che implementa il layout di default. Possono comunque essere creati pi\'f9 layout ciascuno battezzato appositamente. E' da notare che i file contenuti nella cartella tmpl sono modificabili a livello di template attraverso la tecnica del Template Layout Override.\par
\pard\sa200\sl276\slmult1\b com_helloworld_03\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 viene aggiunto un elemento ulteriore necessario all'implementazione del paradigma MVC, ovvero il modello. E' stata quindi aggiunta la cartella \b models \b0 nella quale \'e8 stato creato un file con lo stesso nome del controller/vista. All'interno della cartella com_helloworld_03/admin/models/ \'e8 stato quindi creato il file \b helloworld.php\b0 .\par
{\pntext\f1\'B7\tab}il modello, in questo esempio specifico, contiene una funzione getMsg che stampa un messaggio oppure un altro a seconda se viene passato un parametro id uguale a 1 oppure uguale a 2. La cosa interessante \'e8 che il file com_helloworld_03/admin/views/helloworld/tmpl/\b default.php \b0 essendo la vista specifica collegata al relativo modello sente la presenza di questa variabile e stampa un messaggio o l'altro a seconda dell'elaborazione prodotta dal modello stesso.\par
\pard\sa200\sl276\slmult1\b com_helloworld_04\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 in questa versione di helloworld viene introdotto il supporto al database e quindi, a livello di manifest, viene aggiunta la parte riferita agli script di installazione, contraddistinta dai tag <install><uninstall> e <update>. Questi tag contengono il riferimento ad un file di script di installazione, disintallazione o aggiornamento, per ogni motore dbms di cui si vuole predisporre la compatibilit\'e0 (es: mysql, postgres, sqlserver ecc). E' da notare che i file contenuti nella cartella riferita dal tag <update> devono essere battezzati con il nome version_number.sql e vengono eseguiti soltanto in caso di installazione del pacchetto a partire da una versione precedente. Chi installa il pacchetto ex novo in realt\'e0 scatena lo script di installazione e non quello di aggiornamento. Questo tipo di funzionamento \'e8 stato introdoto a partire dal supporto all'attributo method="upgrade" del tag <extensions>.\par
{\pntext\f1\'B7\tab}il manifest deve contenere anche il riferimento al folder \b sql \b0 che contiene gli scritp di cui sopra ma deve riferire anche la cartella \b tables\b0 . In essa devono essere creati tanti file php ognuno per ogni tabella di cui si vuole effettuare il mapping logico. Visto che nell'esempio si intende creare una tabella di nome "helloworld" viene creato un file com_helloworld_04/admin/tables/\b helloworld.php\b0 . In realt\'e0 non \'e8 necessario battezzare la tabella logica con lo stesso nome della tabella fisica. In certi casi \'e8 possibile anche creare una tabella logica come join di pi\'f9 tabelle fisiche e quindi il nome non \'e8 rilevante. Quello che conta \'e8 il riferimento interno al nome tabella/chiave contenuto nella classe stessa.\b\par
\b0{\pntext\f1\'B7\tab}a questo punto il modello contiene un po' di funzioni interessanti perch\'e9 invece di fornire il messaggio alla vista, semplcimente leggendo un parametro sulla URL, effettua questa operazione attraverso la lettura di un valore sulla banca dati. O meglio utilizza lo stesso parametro come chiave di ricerca sul db.\par
\pard\sa200\sl276\slmult1\b com_helloworld_05\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 In questa release \'e8 stato introdotto il supporto alla traduzioni multilingua delle stringhe contenute nel componente. Le stringhe maiuscole contenute nei tag <name><description> e <menu> vegono sostituite con quelle presenti come traduzione nel file com_helloworld_05/admin/language/en-GB/\b en-GB.com_helloworld.sys.ini\b0 . Tutte le stringhe richiamate dal codice php con la funzione JText::_('STRINGA_DA_TRADURRE') vengono tradotte con quelle contenute nel file com_helloworld_05/admin/language/en-GB/\b en-GB.com_helloworld.ini\b0 . Potr\'e0 essere creata una cartella per ogni lingua da supportare, comunque sia il suo riferimento dovr\'e0 essere aggiunto al manifest file nel tag <languages>\b  \b0\par
\pard\sa200\sl276\slmult1\b com_helloworld_06 (ATTENZIONE! CONSIGLIATA LA DISINSTALLARE DELLA VERSIONE 05)\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 in questo pacchetto viene incluso l'ultimo tassello necessario alla completa implementazione del paradigma MVC, ovverosia il controller. E' stato aggiunto infatti nel manifest il riferimento al folder com_helloworld_06/admin/controllers, non perch\'e9 anche prima non fosse presente un controller ma perch\'e9 \'e8 nostra intenzione prevederne pi\'f9 di uno. E' stato quindi cambiato il riferimento al controller di default che anzich\'e9 riferire a helloworld (comunemente utilizzato per la vista singolare) riferisce invece a helloworlds in modo da prevedere un ciclo MVC dedicato alla vista plurale (elenco di oggetti) ed uno alla vista singolare (dettaglio di un oggetto specifico).\par
{\pntext\f1\'B7\tab}nel file controller.php \'e8 stata quindi aggiunto il comando per l'impostazione di una vista di default nel caso in cui l'utente non la richiami espressamente mediante parametro passato sulla URL.\par
{\pntext\f1\'B7\tab}nel file com_helloworld_06/admin/controllers/\b helloworlds.php\b0  \'e8 stato aggiunta la dichiarazione di un controller di vista plurale che tipicamente estende la superclasse JControllerAdmin\par
{\pntext\f1\'B7\tab}il modello omonimo com_helloworld_06/admin/models/\b helloworlds.php \b0 che estende JModelList a questo punto contiene i tre metodi fondamentali sempre presenti in ogni controllo di vista plurare: __construct, getListQuery, populateState. Il costruttore \b __construct \b0 oltre a richiamare il costruttore della superclasse si preoccupa di impostare quei campi che saranno utilizzati come filtri di ricerca oppure di ordinamento. Nel medoto \b getListQuery\b0  \'e8 sempre presente la query sul database per il recupero dell'iteratore di oggetti record. Nel metodo \b populateState \b0 invece, oltre a richiamare lo stesso metodo della superclasse, si aggiungono alla sessione (allo stato) i parametri di filtro, ordinamento o paginazione che eventualmente si vogliono utilizzare nella vista. \par
{\pntext\f1\'B7\tab}il file com_helloworld_06/admin/views/helloworlds/\b view.html.php\b0  stavolta contiene nel metodo \b display \b0 il kit di comandi necessari al recupero, dal modello, delle variabili di stato, paginazione e criteri di ordinamento. Dopo di che con il comando \b parent::display($tpl)\b0  viene lanciata la vista sul template di default, ovverosia com_helloworld_06/admin/views/helloworlds/tmpl/\b default.php\b0 . In esso \'e8 contenuto tutto l'html misto al php necessario alla formattazione grafica e quindi, a questo punto, anche il comando di foreach per ciclare i record ritornati dalla query effettuata dal modello helloworlds.\par
{\pntext\f1\'B7\tab}nel caso in cui non venisse prima disinstallato il com_helloworld_05 (come consigliato), questa versione contiene anche un esempio di utilizzo del tag <update>. Infatti \'e8 stato previsto un file com_helloworld_06/admin/sql/update/\b 0.0.6.sql\b0  che contiene alcune insert aggiuntiva di record alla tabella helloworld, in modo da testare la funzionalit\'e0 di paginazione. Visto che lo script di update viene eseguito soltanto nei casi in cui si provenga dalla versione immediatamente precedente, le insert suddette sono state aggiunte anche allo script <install> in modo tale che anche chi installa per la prima volta il componente si ritrovi le stesse righe aggiuntive.\par
\pard\sa200\sl276\slmult1\b com_helloworld_07\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 in questa installazione vengono aggiunti alcuni criteri di ricerca alla lista di oggetti con paginazione (elenco di oggetti helloworld)\par
{\pntext\f1\'B7\tab}per far questo, seppur sia possibile esplicitare parametro per parametro attraverso un html esplicito, il framework di Joomla permette di utilizzare un meccanismo di rendering automatico basato su file xml. E' stato quindi aggiunto il file com_helloworld_07/admin/models/forms/\b filter_helloworlds.xml \b0 in cui sono stati elencati, attraverso la sintassi descritta al seguente indirizzo ({\field{\*\fldinst{HYPERLINK "https://docs.joomla.org/Form_field"}}{\fldrslt{\ul\cf1 https://docs.joomla.org/Form_field}}}\f0\fs22 ), tutti i campi con cui condizionare la query. Criteri di ricerca e di ordinamento. \par
{\pntext\f1\'B7\tab}il file com_helloworld_07/admin/views/helloworlds/tmpl/\b default.php\b0  a questo punto contiene la chiamata \b JLayoutHelper::render \b0 per la formattazione html dei criteri di ricerca\par
{\pntext\f1\'B7\tab}Il file com_helloworld_07/admin/models/\b helloworlds.php \b0 conterr\'e0 il recupero dallo stato dei criteri di ricerca ed il conseguente loro inserimento nella query che verr\'e0 effettua sul database opportunamente filtrata.\par
\pard\sa200\sl276\slmult1\b com_helloworld_08\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 In questo pacchetto \'e8 stato aggiunto tutto il ciclo MVC destinato alla gestione della vista "singolare" quella che permette l'inserimento, la modifica e la cancellazione di ogni singolo oggetto "helloworld". In questo caso abbiamo realizzato quello che in gergo viene chiama CRUD (Create, Read, Update, Delete).\par
{\pntext\f1\'B7\tab}Avremo quindi un file com_helloworld_08/admin/controllers/\b helloworld.php\b0\par
{\pntext\f1\'B7\tab}Avremo un file com_helloworld_08/admin/models/\b helloworld.php\b0\par
{\pntext\f1\'B7\tab}Avremo infine i due file necessari all'implementazione della vista, com_helloworld_08/admin/views/helloworld/\b view.html.php\b0  e questa volta  com_helloworld_08/admin/views/helloworld/tmpl/\b edit.php\b0 . Nel caso del form di inserimento di un singolo oggetto il framework Joomla vuole un file chiamato edit.php e non default.php.\par
{\pntext\f1\'B7\tab}La particolarit\'e0 della vista singolare sta nell'utilizzo della classe JForm, attraverso la quale \'e8 possibile renderizzare l'html del form di inserimento dati semplcimente attraverso la definizione di tag xml che li descrivono. Questi tag vengono inseriti nel file  com_helloworld_08/admin/models/forms/\b helloworld.xml\b0 .\par
{\pntext\f1\'B7\tab}Un'altra funzionalit\'e0 degna di nota in questo pacchetto \'e8 la tecnica utilizzata per la personalizzazione delle regole di validazione dei campi contenuti nel form. Il file helloworld.xml infatti contiene anche un path per indicare il file php contenente la regola di validazione custom. In questo caso il file si trova in  com_helloworld_08/admin/models/rules/\b greeting.php\b0  visto che nel file helloworld.xml era stata dichiarata una validazione di tipo "greeting". Il nome \'e8 ovviamente personalizzabile.\par
{\pntext\f1\'B7\tab}Altra funzionalit\'e0 implementata con questo pacchetto \'e8 la toolbar che viene gestita tramite i metodi \b addToolBar\b0  presenti sia in com_helloworld_08/admin/views/helloworld/\b view.html.php \b0 che in  com_helloworld_08/admin/views/helloworlds/\b view.html.php\b0 . Nella tollbar \'e8 possibile impostare olter al titolo della pagina anche un'icona standard tra le tante disponibili nella libreria bootstrap ({\field{\*\fldinst{HYPERLINK "http://www.joomla.it/esempi-bootstrap.html"}}{\fldrslt{\ul\cf1 http://www.joomla.it/esempi-bootstrap.html}}}\f0\fs22 )\par
\pard\sa200\sl276\slmult1\b com_helloworld_09\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 in questo pacchetto viene aggiunta la funzionalit\'e0 di ACL (Access, Control, List) e quindi viene aggiunto anche il tasto "Opzioni" sulla toolbar della vista plurale.\par
{\pntext\f1\'B7\tab}per far questo vegono riferiti nel manifest i due file com_helloworld_09/admin/\b config.xml \b0 e com_helloworld_09/admin/\b access.xml\b0 . Il primo file contiene i tag xml necessari per la visualizzazione dei parametri di configurazione successivamente all'aver premuto il tasto "Opzioni". Tra i vari tag \'e8 previsto anche il tag con name="permissions" che richiama le politiche di ACL, leggendole dal file access.xml.\par
{\pntext\f1\'B7\tab}ogni singola funzionalit\'e0, a questo punto, potr\'e0 essere assoggettata all'appartenenza o meno ad un determinato gruppo utenti, abilitato o meno su una determinata azione (create, read, update, delete, publish etc.....)\par
{\pntext\f1\'B7\tab}per la prima volta viene utilizato un file com_helloworld_09/admin/helpers/\b hellowrold.php\b0  che vedremo conterr\'e0 in moltissimi componete tutto il codice di utilit\'e0 che non \'e8 solitamente riconducibile alla classificazione delle classi secondo il paradigma MVC. In questa versione dell'helper sono state aggiunte le funzioni per il controllo e test parziale dell'ACL su determinate funzioni. Ma in esso spesso vengono aggiunte anche le funzioni di inclusioni di classi CSS o Javascript aggiuntive. Vista la sua importanza centrale, per il fatto che viene richiamato da moltissime sottoclassi del componente, la sua inclusione viene fatta a livello di entry point. Infatti la com_helloworld_09/admin/\b helloworld.php\b0  contiene la chiamata \b JLoader::register \b0 che include inizialmente in autoloading la classe helper, in modo da dargli visibilit\'e0 globale.\par
\pard\sa200\sl276\slmult1\b com_helloworld_10\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 in questa versione si utilizza nuovamente il tag <update> attraverso il file com_helloworld_10/admin/sql/update/\b 0.0.10.sql\b0  per introdure il campo \b catid\b0  nella tabella helloworld. Si vuole infatti aggiungere la funzionalit\'e0 di categorizzazione offerta dalla base applicativa di Joomla. Questo framework infatti permette di categorizzare qualsiasi oggetto, sia quelli del core sia quelli introdotti da componenti aggiunti, attraverso l'uso delle funzionalit\'e0 del componente nativo \b com_categories\b0 .\b\par
\b0{\pntext\f1\'B7\tab}visto che adesso non si passa pi\'f9 dalla semplice vista plurale a quella singolare ma \'e8 necessario prevedere un link anche per la gestione del ciclo MVC delle categorie, \'e8 stata aggiunta la funzoine \b addSubmenu \b0 alla classe \b helloworldHelper\b0  che poco fa era stata utlizzata per il controllo ACL. Questa nuova funzione permette di aggiungere all'interfaccia utente un sottomenu con i due link "helloworlds" e "categories".\b\par
\b0{\pntext\f1\'B7\tab}oltre alla predisposizione del campo aggiuntivo \'e8 stato necessario modificare i file com_helloworld_10/admin/models/\b helloworlds.php \b0 in modo che la query contenesse anche la lefJoin per mostrae anche le categorie associale ai recordi di tipo helloworl, quando presenti. \b\par
\b0{\pntext\f1\'B7\tab}inoltre \'e8 stato necessario aggiungere il tag xml opportuno (di tipo "category") al file com_hellworold_10/admin/models/forms/\b helloworld.xml\par
\b0{\pntext\f1\'B7\tab}infine \'e8 stato necessario aggiungere la colonna html aggiuntiva nel file com_helloworld_10/admin/views/helloworlds/tmpl/\b default.php \b0 per visualizzare il campo categoria, laddove presente, in corrisondenza del record helloworld relativo.\b\par
\pard\sa200\sl276\slmult1 com_helloworld_11\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 nella presente versione \'e8 stata aggiunta l'implementazione del lato \b site\b0 , ovvero la parte dedicata al frontend. Per far questo \'e8 stato molto semplicemente clonata tutta l'alberatura del lato "admin" facendo le opportune modifiche.\b\par
\b0{\pntext\f1\'B7\tab}sono state ignorate le cartellel \b sql \b0 e \b tables\b0  e sono stati scartati i file \b access.xml \b0 e \b config.xml\par
\b0{\pntext\f1\'B7\tab}intoltre sono stati aggiunti i file com_helloworld_11/site/views/helloworld/tmpl/\b default.xml \b0 e com_helloworld_11/site/views/helloworlds/tmpl/\b default.xml\b0  per permettere la creazione di una voce di menu da pannello di amministrazione, rispettivamente per la vista singolare e per la vista plurale.\tab\b\par
\b0{\pntext\f1\'B7\tab}un'altra particolarit\'e0 degna di nota in questa versione \'e8 l'introduzione di un tipo field personalizzato, il quale \'e8 visibile nel file com_helloworld_11/site/model/fields/\b helloworld.php\b0 . In esso \'e8 stato definito un tipo aggiuntivo "helloworld" come estensione di un tipo di sistema JFormFieldList. Il tipo produce un html list in cui le option vengono generate dinamicamente sulla base di una qery sul db. Il nuovo tipo \'e8 stato utlizzato nel file com_helloworld_11/site/views/helloworld/tmpl/\b helloworld.xml\b0  come parametro di voce di menu ma, con lo stesso criterio, si pu\'f2 tranquillamente utlizzare anche nel form di inserimento dati che abbiamo visto nel backend. \b\par
\pard\sa200\sl276\slmult1 com_helloworld_12\par
\b0 questa versione introduce solamente la funzionalit\'e0 del file com_helloworld_12/\b script.php \b0 nel quale vengono previste tutte le operazioni da fare in alcuni momenti della fase di installazione/aggiornamento del componente. I metodi in esso contenuti sono: \par
\pard{\pntext\f0 a.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnlcltr{\pntxta.}}
\fi-360\li360\sa200\sl276\slmult1 install() - da eseguire al momento dell\rquote installazione\par
{\pntext\f0 b.\tab}uninstall() - da eseguire al momento della disinstallazione\par
{\pntext\f0 c.\tab}update() - da eseguire ad ogni aggiornamento\par
{\pntext\f0 d.\tab}preflight() - da eseguire prima di ogni (install, update or discover_install)\par
{\pntext\f0 e.\tab}postflight() - eseguire dopo ogni (install, update or discover_install)\par
\pard\sa200\sl276\slmult1 In questo caso ogni metodo stampa semplicemente un testo.\par
}
 